---
- name: SonarQube Project and Token Automation
  hosts: your_ec2_instance
  become: true
  tasks:

    - name: Check if SonarQube container is running
      shell: "docker ps -q -f name=sonarqube"
      register: sonarqube_container
      ignore_errors: yes

    - name: Run SonarQube in Docker container if not already running
      command: >
        docker run -d --name sonarqube
        -p 9000:9000
        -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
        -v sonarqube_data:/opt/sonarqube/data
        -v sonarqube_logs:/opt/sonarqube/logs
        -v sonarqube_extensions:/opt/sonarqube/extensions
        sonarqube:lts
      when: sonarqube_container.stdout == ""
      ignore_errors: yes

    - name: Wait for SonarQube to be ready
      wait_for:
        port: 9000
        timeout: 300
        delay: 30

    - name: Check if admin user exists
      command: >
        curl -u admin:admin -X GET "http://localhost:9000/api/users/search?login=admin"
      register: admin_check
      ignore_errors: yes

    - name: Change SonarQube admin password if it's a new instance
      command: >
        curl -u admin:admin -X POST
        "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=admin123"
      when: admin_check.rc == 0
      ignore_errors: yes

    - name: Log in to SonarQube with admin:admin123
      command: >
        curl -u admin:admin123 -X GET "http://localhost:9000/api/users/search?login=admin"
      when: admin_check.rc == 0
      register: login_response
      ignore_errors: yes

    - name: Create SonarQube project with timestamp
      command: >
        curl -u admin:admin123 -X POST
        "http://localhost:9000/api/projects/create?name=MyProject{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}&project=my_project_key"
      when: login_response is defined
      ignore_errors: yes

    - name: Check for existing SonarQube token
      command: >
        curl -u admin:admin123 -X GET
        "http://localhost:9000/api/user_tokens/search?login=admin"
      register: token_response
      changed_when: false
      ignore_errors: yes

    - name: Set SonarQube token fact
      set_fact:
        sonar_token: "{{ (token_response.stdout | from_json).tokens | selectattr('name', 'equalto', 'my_project_token') | list | first }}"
      when: "'tokens' in token_response.stdout | from_json"

    - name: Generate SonarQube token if it does not exist
      command: >
        curl -u admin:admin123 -X POST
        "http://localhost:9000/api/user_tokens/generate?name=my_project_token"
      register: token_generation_response
      when: sonar_token is not defined
      ignore_errors: yes

    - name: Fetch the generated SonarQube token
      command: >
        curl -u admin:admin123 -X GET
        "http://localhost:9000/api/user_tokens/search?login=admin"
      register: token_final_response
      when: sonar_token is not defined
      ignore_errors: yes

    - name: Save the SonarQube token to a file
      copy:
        content: "{{ (token_final_response.stdout | from_json).tokens | selectattr('name', 'equalto', 'my_project_token') | list | first }}"
        dest: "/path/to/save/sonarqube_token.txt"
      when: sonar_token is not defined and 'tokens' in token_final_response.stdout | from_json

    - name: Display the SonarQube token
      debug:
        msg: "SonarQube token: {{ sonar_token.token if sonar_token is defined else (token_final_response.stdout | from_json).tokens | selectattr('name', 'equalto', 'my_project_token') | list | first }}"

