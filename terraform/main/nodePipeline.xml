<?xml version='1.0' encoding='UTF-8'?>
<flow-definition>
  <description>Pipeline for SonarQube analysis and deployment</description>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>                 

pipeline {
    agent any
    tools {
        nodejs "node" // Node.js installation in Jenkins
    }
    environment {
        VM_SSH = "ubuntu@18.219.11.171"
        SONARQUBE_URL = 'http://18.219.11.171:9000'
        SONARQUBE_TOKEN = "${env.SONARQUBE_TOKEN}"
        SONARQUBE_PASSWORD = 'admin123'
    }
    stages {
        stage("Checkout Code") {
            steps {
                script {
                    echo "Pulling the repository"
                    git url: 'https://github.com/JEEVAABI15/vite_project', branch: 'main'
                }
            }
        }
        stage("Install Dependencies") {
            steps {
                script {
                    echo "Installing dependencies"
                    sh 'npm install'
                }
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar') {
                    script {
                        echo "Running SonarQube analysis"
                        def scannerHome = tool name: 'sonar'
                        sh '''
                        /opt/sonar-scanner/bin/sonar-scanner \
                        -Dsonar.projectKey=vite_project \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONARQUBE_TOKEN}
                        '''
                    }
                }
            }
        }
        stage('Check SonarQube Task Status') {
            steps {
                script {
                    // Navigate to the correct directory using 'dir'
                    dir('.scannerwork') {
                        // Extract ceTaskId from the report-task.txt file
                        def ceTaskId = sh(script: "grep 'ceTaskId' report-task.txt | cut -d'=' -f2", returnStdout: true).trim()
                        // Fetch the task status using the SonarQube API
                        def taskStatus = sh(script: "curl -u admin:${SONARQUBE_PASSWORD} ${SONARQUBE_URL}/api/ce/task?id=${ceTaskId}", returnStdout: true).trim()
                        // Check the task status
                        if (taskStatus.contains('"status":"FAILED"')) {
                            error "SonarQube analysis failed!"
                        } else if (taskStatus.contains('"status":"SUCCESS"')) {
                            echo "SonarQube analysis passed!"
                        } else {
                            echo "SonarQube analysis is still in progress."
                        }
                    }
                }
            }
        }
        stage("Build Project") {
            steps {
                script {
                    echo "Building the project"
                    sh 'npm run build'
                }
            }
        }
        stage("Move Files to VM for Apache Hosting") {
            steps {
                script {
                    echo "Moving build files to /var/www/html on AWS VM"
                    sh '''
                    scp -r dist/* ${VM_SSH}:/var/www/html
                    '''
                }
            }
        }
        stage("Restart Apache2 Service") {
            steps {
                script {
                    echo "Restarting Apache2 on AWS VM"
                    sh '''
                    ssh ${VM_SSH} "sudo systemctl restart apache2"
                    '''
                }
            }
        }
    }
}

    </script>
    <sandbox>true</sandbox>
  </definition>
</flow-definition>
